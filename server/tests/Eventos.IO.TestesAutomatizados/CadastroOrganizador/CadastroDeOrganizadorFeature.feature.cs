// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Eventos.IO.TestesAutomatizados.CadastroOrganizador
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CadastroDeOrganizadorFeature : object, Xunit.IClassFixture<CadastroDeOrganizadorFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CadastroDeOrganizadorFeature.feature"
#line hidden
        
        public CadastroDeOrganizadorFeature(CadastroDeOrganizadorFeature.FixtureData fixtureData, Eventos_IO_TestesAutomatizados_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Cadastro de Organizador", "\tUm organizador fará seu cadastro pelo site\r\n\tpara poder gerenciar seus próprios " +
                    "eventos\r\n\tAo terminar o cadastro receberá uma notificação\r\n\tde sucesso ou de fal" +
                    "ha.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cadastro de Organizador com Sucesso")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastro de Organizador")]
        [Xunit.TraitAttribute("Description", "Cadastro de Organizador com Sucesso")]
        [Xunit.TraitAttribute("Category", "TesteAutomatizadoCadastroDeOrganizadorComSucesso")]
        public virtual void CadastroDeOrganizadorComSucesso()
        {
            string[] tagsOfScenario = new string[] {
                    "TesteAutomatizadoCadastroDeOrganizadorComSucesso"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastro de Organizador com Sucesso", null, new string[] {
                        "TesteAutomatizadoCadastroDeOrganizadorComSucesso"});
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given("que o Organizador está no site, na página inicial", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 11
 testRunner.And("clica no link de registro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Campo",
                            "Valor"});
                table1.AddRow(new string[] {
                            "nome",
                            "Patrizia Mastrodonato"});
                table1.AddRow(new string[] {
                            "cpf",
                            "06231550010"});
                table1.AddRow(new string[] {
                            "email",
                            "patrizia.mastrodonato@apeoesp.br"});
                table1.AddRow(new string[] {
                            "password",
                            "Teste@123"});
                table1.AddRow(new string[] {
                            "confirmPassword",
                            "Teste@123"});
#line 12
 testRunner.And("Preenche os campos com os valores", ((string)(null)), table1, "E ");
#line hidden
#line 19
 testRunner.When("clicar no botão registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 20
 testRunner.Then("Será registrado e redirecionado com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CadastroDeOrganizadorFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CadastroDeOrganizadorFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
